// Generated by LiveScript 1.2.0
(function(){
  var path, fs, koa, log4js, koaStatic, mount, router, views, mvc, logger, app, dateFileLog, pageNotFound, error;
  path = require('path');
  fs = require('fs');
  koa = require('koa');
  log4js = require('log4js');
  koaStatic = require('koa-static');
  mount = require('koa-mount');
  router = require('koa-router');
  views = require('co-views');
  mvc = require('heron-mvc');
  logger = require('./helpers/logger').getLogger('app');
  app = koa();
  console.log(process);
  log4js.configure('config/log4js.json', {});
  dateFileLog = log4js.getLogger('normal');
  log4js.connectLogger(dateFileLog, {
    level: 'debug',
    format: ':method :url'
  });
  app.use(koaStatic(path.join(__dirname, '../public')));
  pageNotFound = function*(next){
    yield next;
    if (this.status !== 404) {
      return;
    }
    this.status = 404;
    switch (this.accepts('html', 'json')) {
    case 'html':
      this.type = 'html';
      this.body = 'Page Not Found';
      break;
    case 'json':
      this.body = {
        message: 'Page Not Found'
      };
      break;
    default:
      this.type = 'text';
      this.body = 'Page Not Found';
    }
  };
  app.use(pageNotFound);
  if ('development' === app.env) {
    error = function*(next){
      var e;
      try {
        yield next;
      } catch (e$) {
        e = e$;
        this.status = e.status || 500;
        this.type = 'html';
        this.body = 'error 500';
        this.app.emit('error', e, this);
      }
    };
    app.use(error);
  }
  if ('production' === app.env) {
    0;
  }
  error = function*(next){
    var e;
    try {
      yield next;
    } catch (e$) {
      e = e$;
      this.status = e.status || 500;
      this.type = 'html';
      this.body = 'error 500';
      this.app.emit('error', e, this);
    }
  };
  app.use(error);
  app.on('error', function(err){
    logger.error(err);
    return;
  });
  module.exports = app;
}).call(this);
