// Generated by CoffeeScript 1.7.1
(function() {
  var async, express, file, fs, logger, path, _;

  fs = require("fs");

  path = require("path");

  _ = require("underscore");

  async = require("async");

  express = require("express");

  file = require("../helper/file");

  logger = require("../helper/logger").getLogger("route_index");

  module.exports = function(app) {
    var action, controller, controller_arr, controllers, k, methods, route, route_arr, router, routes, v, _i, _j, _len, _len1, _results;
    routes = file.getRouteFileSync(__dirname);
    for (_i = 0, _len = routes.length; _i < _len; _i++) {
      route_arr = routes[_i];
      route = require("./" + route_arr[1]);
      app.use("/" + route_arr[0], route);
      logger.info("load router: %j -> path: /%s", route_arr, route_arr[0]);
    }
    controllers = file.getControllerFileSync(path.join(__dirname, "../controllers"));
    controllers = _.reject(controllers, function(controller) {
      return _.find(routes, function(route) {
        return route[0] === controller[0];
      });
    });
    logger.info("load all controller: %j", controllers);
    _results = [];
    for (_j = 0, _len1 = controllers.length; _j < _len1; _j++) {
      controller_arr = controllers[_j];
      controller = require("../controllers/" + controller_arr[1]);
      router = express.Router();
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (action in controller) {
          methods = controller[action];
          _results1.push((function() {
            var _results2;
            _results2 = [];
            for (k in methods) {
              v = methods[k];
              switch (k) {
                case "get":
                  logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
                  router.get("/" + action, v);
                  _results2.push(app.use("/" + controller_arr[0], router));
                  break;
                case "post":
                  logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
                  router.post("/" + action, v);
                  _results2.push(app.use("/" + controller_arr[0], router));
                  break;
                case "put":
                  router.put("/" + action, v);
                  _results2.push(app.use("/" + controller_arr[0], router));
                  break;
                case "delete":
                  router["delete"]("/" + action, v);
                  _results2.push(app.use("/" + controller_arr[0], router));
                  break;
                default:
                  _results2.push(logger.info("not found method!"));
              }
            }
            return _results2;
          })());
        }
        return _results1;
      })());
    }
    return _results;
  };

}).call(this);

//# sourceMappingURL=index.map
