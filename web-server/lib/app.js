// Generated by LiveScript 1.2.0
(function(){
  var path, fs, koa, log4js, koaStatic, mount, koaRouter, views, mvc, app, logger, pageNotFound, error;
  path = require('path');
  fs = require('fs');
  koa = require('koa');
  log4js = require('log4js');
  koaStatic = require('koa-static');
  mount = require('koa-mount');
  koaRouter = require('koa-router');
  views = require('co-views');
  mvc = require('heron-mvc');
  views = require('./helper/views');
  app = koa();
  logger = function*(next){
    var dateFileLog;
    log4js.configure('configure/log4js.json', {});
    dateFileLog = log4js.getLogger('normal');
    log4js.connectLogger(dateFileLog, {
      level: 'debug',
      format: ':method :url'
    });
    yield next;
  };
  app.use(logger);
  app.use(koaStatic(path.join(__dirname, '../public')));
  pageNotFound = function*(next){
    yield next;
    if (this.status !== 404) {
      return;
    }
    this.status = 404;
    switch (this.accepts('html', 'json')) {
    case 'html':
      this.type = 'html';
      this.body = 'Page Not Found';
      break;
    case 'json':
      this.body = {
        message: 'Page Not Found'
      };
      break;
    default:
      this.type = 'text';
      this.body = 'Page Not Found';
    }
  };
  app.use(pageNotFound);
  if ('development' === app.env) {
    error = function*(next){
      var e;
      try {
        yield next;
      } catch (e$) {
        e = e$;
        this.status = e.status || 500;
        this.type = 'html';
        this.body = 'error 500';
        this.app.emit('error', e, this);
      }
    };
    app.use(error);
  }
  if ('production' === app.env) {
    0;
  }
  error = function*(next){
    var e;
    try {
      yield next;
    } catch (e$) {
      e = e$;
      this.status = e.status || 500;
      this.type = 'html';
      this.body = 'error 500';
      this.app.emit('error', e, this);
    }
  };
  app.use(error);
  app.on('error', function(err){
    console.log(err);
    return;
  });
  mvc.route.load({
    routeDir: path.join(__dirname, './routes'),
    controllerDir: path.join(__dirname, './controllers')
  }, function(data){}, function(data){
    var router;
    router = new koaRouter();
    router[data.method]("/" + data.controller + "/" + data.action, data.func);
    if (data.controller === 'home' && data.action === 'index') {
      router[data.method]("/", data.func);
    }
    return app.use(router.middleware());
  });
  app.use(mount('/demo', function*(){
    var h, a, html;
    h = yield render('home/index', {});
    a = render('partials/_layout', {
      title: 'home',
      partials: {
        footer: 'footer'
      }
    });
    html = [yield a];
    html = html.join('\n');
    this.body = html;
  }));
  views.hogan.layout = 'partials/_layout';
  views.hogan.partials = {
    bootstrap_header_link: '../partials/bootstrap/header_link',
    footer_link: '../partials/footer_link',
    header_link: '../partials/header_link',
    bootstrap_footer_link: '../partials/bootstrap/footer_link'
  };
  app.use(mount('/test', function*(){
    this.body = yield views.hogan.render('home/index', {
      partials: {
        footer: '../partials/footer'
      }
    });
  }));
  module.exports = app;
}).call(this);
