// Generated by CoffeeScript 1.7.1
(function() {
  var async, express, file, fs, logger, path, _;

  fs = require("fs");

  path = require("path");

  _ = require("underscore");

  async = require("async");

  express = require("express");

  file = require("../helper/file");

  logger = require("../helper/logger").getLogger("route_index");

  module.exports = function(app) {
    var action, controller, controller_arr, controllers, k, methods, route, route_arr, router, routes, v, _i, _j, _len, _len1, _results;
    routes = file.getRouteFileSync(__dirname);
    for (_i = 0, _len = routes.length; _i < _len; _i++) {
      route_arr = routes[_i];
      route = require("./" + route_arr[1]);
      app.use("/" + route_arr[0], route);
      logger.info("load router: %j -> path: /%s", route_arr, route_arr[0]);
    }
    controllers = file.getControllerFileSync(path.join(__dirname, "../controllers"));
    controllers = _.reject(controllers, function(controller) {
      return _.find(routes, function(route) {
        return route[0] === controller[0];
      });
    });
    logger.info("load all controller: %j", controllers);
    _results = [];
    for (_j = 0, _len1 = controllers.length; _j < _len1; _j++) {
      controller_arr = controllers[_j];
      controller = require("../controllers/" + controller_arr[1]);
      router = express.Router({
        caseSensitive: true
      });
      for (action in controller) {
        methods = controller[action];
        for (k in methods) {
          v = methods[k];
          switch (k) {
            case "all":
              logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
              router.all("/" + action, v);
              break;
            case "get":
              logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
              router.get("/" + action, v);
              break;
            case "post":
              logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
              router.post("/" + action, v);
              break;
            case "put":
              logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
              router.put("/" + action, v);
              break;
            case "delete":
              logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
              router["delete"]("/" + action, v);
              break;
            default:
              logger.info("not found method!");
          }
          app.use("/" + controller_arr[0], router);
        }
      }
      if (controller_arr[0] === "home") {
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (action in controller) {
            methods = controller[action];
            _results1.push((function() {
              var _results2;
              _results2 = [];
              for (k in methods) {
                v = methods[k];
                switch (k) {
                  case "all":
                    logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
                    router.all("/", v);
                    break;
                  case "get":
                    logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
                    router.get("/", v);
                    break;
                  case "post":
                    logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
                    router.post("/", v);
                    break;
                  case "put":
                    logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
                    router.put("/", v);
                    break;
                  case "delete":
                    logger.info("load action: %s -> path: /%s -> method: /%s", action, path.join(controller_arr[0], action), k);
                    router["delete"]("/", v);
                    break;
                  default:
                    logger.info("not found method!");
                }
                _results2.push(app.use("/", router));
              }
              return _results2;
            })());
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);

//# sourceMappingURL=index.map
